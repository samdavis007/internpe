# -*- coding: utf-8 -*-
"""diabates_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/samdavis007/7e2fb7a822793683acfcc1906ae3b861/copy-of-diabates_prediction.ipynb
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline
import numpy as np
import warnings
# from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

warnings.filterwarnings('ignore', append=True)

!kaggle datasets download -d shantanudhakadd/diabetes-dataset-for-beginners

!unzip -qq /content/diabetes-dataset-for-beginners.zip

df = pd.read_csv('/content/diabetes.csv')
df.head()

df.shape

df.info()

df.describe()

df.duplicated().sum()

df.isnull().sum()

df.dtypes

sns.heatmap(df.corr(),cmap='Blues',annot=True)

df_corr = df.corr()
df_corr['Outcome'].sort_values(ascending=False)

# df.drop(columns=['BloodPressure', 'SkinThickness'], inplace=True)

X = df[['Glucose','BMI','Age','Pregnancies']]
y = df['Outcome']

X

y

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

X_train

y_train

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train,y_train)

y_pred = model.predict(X_test)
print(f'Accuracy={accuracy_score(y_test,y_pred)*100}%')

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

y_pred = rf_classifier.predict(X_test)
print(f'Accuracy={accuracy_score(y_test,y_pred)*100}%')

svm_model = Pipeline([("svm_clf", SVC(kernel="poly", degree=3, coef0=1, C=5))])
svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
# print(f'Accuracy={svm_model.score(X_train, y_train)*100:.2f}%')
print(f'Accuracy={accuracy_score(y_test, y_pred)*100:.2f}%')

def read_values():
  age = float(input('Enter age: '))
  glucose = float(input('Enter glucose: '))
  bmi = float(input('Enter BMI value: '))
  pregnancies = float(input('Enter no of pregnancies: '))
  return np.array([[age, glucose, bmi, pregnancies]])

test = read_values()
test_scaled = scaler.transform(test)
output = model.predict(test_scaled)
if output == 1:
    print("Person has diabetes")
else:
    print("Person does not have diabetes")